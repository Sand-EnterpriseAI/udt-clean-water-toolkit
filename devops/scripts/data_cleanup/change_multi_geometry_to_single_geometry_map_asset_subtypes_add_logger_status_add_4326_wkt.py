# -*- coding: utf-8 -*-
"""
Change Multi Geometry to Single Geometry | Map Asset Subtypes | Add Logger Status | Add 4326 WKT.ipynb

Automatically generated by Colab.
"""

import fiona
import shapely
from shapely.geometry import Point, MultiPoint, LineString, MultiLineString
from shapely import wkt
import os
import geopandas as gpd
import pandas as pd

from google.colab import drive

drive.mount('/content/drive/', force_remount=True)

os.chdir("/content/drive/MyDrive")

#original_gpkg = "/content/drive/MyDrive/tw_cleanwater_network_layers.gpkg"

new_gpkg = "/content/drive/MyDrive/tw_cleanwater_network_layers_20240412.gpkg"

old_gpkg = "/content/drive/MyDrive/tw_cleanwater_network_layers_old.gpkg"

csv = "/content/drive/MyDrive/acoustic_logger_status_gsid_mapping.csv"

# prepare logger status csv
logger_df = pd.read_csv(csv)
del logger_df['Unnamed: 0']

# layers that have subtype codes
codelayers = ['wNetworkMeter', 'wPressureContValve', 'wPressureFitting', 'wOperationalSite']
# layers with logger status
loggerlayers = list(logger_df['Model'].unique())

# Function to convert multi geometry to single geometry
def convert_multi_to_single(geom):
    if not geom.is_empty:
        return list(geom.geoms)[0]
    else:
        return None

# Check if the file exists
if os.path.exists(new_gpkg):
    # File exists, delete it
    os.remove(new_gpkg)
    print("Deleted existing file:", new_gpkg)
else:
    print("File does not exist:", new_gpkg)

# Read the original GeoPackage, find MultiPoint geometry and convert to Point, add all layers into new GeoPackage
for layer_name in fiona.listlayers(old_gpkg):
    # make gdf from layer
    original_gdf = gpd.read_file(old_gpkg, layer=layer_name)
    # find list of unique geometry types
    geometry_type = original_gdf.geom_type.unique()
    if layer_name in loggerlayers:
    # select loggers status corresponding with model name
        loggers = logger_df.loc[logger_df["Model"] == layer_name]
    # add logger status column to gdf
    try:
        original_gdf = pd.merge(original_gdf, loggers[['GISID', 'Acoustic_Logger']], left_on=['GISID'], right_on=['GISID'], how='left')
        print("merge successful: ", layer_name)
    except Exception as e:
        print("An error occurred during the merge: ", e, layer_name)
    # add subtypes to specified layers, mapped to subtype codes
    if layer_name in codelayers:
        original_gdf['SUBTYPE'] = None
        if layer_name == 'wNetworkMeter':
            original_gdf['SUBTYPE'] = original_gdf['SUBTYPECD'].map({
                1: 'District Meter',
                2: 'Zonal Meter',
                3: 'Distribution Input Meter',
                4: 'Waste Meter',
                5: 'Fire Meter'
            })
        if layer_name == 'wPressureContValve':
            original_gdf['SUBTYPE'] = original_gdf['SUBTYPECD'].map({
                1: 'Pressure Reducing',
                2: 'Non Return Valve',
                3: 'Pressure Sustaining',
                4: 'Needle',
                5: 'Plug Valve'
            })
        if layer_name == 'wPressureFitting':
            original_gdf['SUBTYPE'] = original_gdf['SUBTYPECD'].map({
                1: 'Tapping Point',
                2: 'Telemetry Pit',
                3: 'Transducer'
            })
        if layer_name == 'wOperationalSite':
            original_gdf['SUBTYPE'] = original_gdf['SUBTYPECD'].map({
                1: 'Booster Station',
                2: 'Borehole',
                3: 'Break Pressure Tank',
                4: 'Pumping Station',
                5: 'Reservoir Covered',
                6: 'Service Reservoir',
                7: 'Shaft Inspection',
                8: 'Shaft Pumping',
                9: 'Treatment Works',
                10: 'Water Tower',
                11: 'Raw Water Storage Reservoir',
                12: 'Other',
                13: 'Unknown'
            })
    # fix multipoint geometry
    if geometry_type == 'MultiPoint':
        geom = original_gdf['geometry']
        # convert multi geometry to single geometry
        original_gdf['geometry'] = original_gdf['geometry'].apply(convert_multi_to_single)
        geomtype = original_gdf.geom_type.unique()
        # create string wkt geometry in EPSG 4326
        original_gdf['wkt_geom_4326'] = wkt.dumps(original_gdf['geometry'].to_crs('EPSG:4326'))
        print('MultiPoint to ', geomtype, ' successful!')
        # save out layer to new gpkg
        original_gdf.to_file(new_gpkg, driver="GPKG", layer=layer_name)
    if geometry_type == 'MultiLineString':
        geom = original_gdf['geometry']
        # convert multi geometry to single geometry
        original_gdf['geometry'] = original_gdf['geometry'].apply(convert_multi_to_single)
        geomtype = original_gdf.geom_type.unique()
        # create string wkt geometry in EPSG 4326
        original_gdf['wkt_geom_4326'] = wkt.dumps(original_gdf['geometry'].to_crs('EPSG:4326'))
        print('MultiLineString to ', geomtype, ' successful!')
        # save out layer to new gpkg
        original_gdf.to_file(new_gpkg, driver="GPKG", layer=layer_name)
    else:
        print('no need to convert: ', geometry_type)
        # create string wkt geometry in EPSG 4326
        original_gdf['wkt_geom_4326'] = wkt.dumps(original_gdf['geometry'].to_crs('EPSG:4326'))
        # save out layer to new gpkg
        original_gdf.to_file(new_gpkg, driver="GPKG", layer=layer_name)

for layer_name in fiona.listlayers(new_gpkg):
    # make gdf from layer
    new_gdf = gpd.read_file(new_gpkg, layer=layer_name)
    # find list of unique geometry types
    geometry_type = new_gdf.geom_type.unique()
    print(layer_name, geometry_type, new_gdf.columns)

for layer_name in fiona.listlayers(old_gpkg):
    old_gdf = gpd.read_file(old_gpkg, layer=layer_name)
    print(layer_name, old_gdf.shape)

for layer_name in fiona.listlayers(new_gpkg):
    new_gdf = gpd.read_file(new_gpkg, layer=layer_name)
    print(layer_name, new_gdf.shape)